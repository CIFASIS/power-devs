#define YY_PdmParser_h_included
/*#define YY_USE_CLASS 
*/
/*  A Bison++ parser, made from parser.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */


#line 1 "/usr/share/bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "/usr/share/bison++/bison.cc"
#define YY_PdmParser_STYPE  pdm_parser_val
#line 27 "parser.y"

#define YY_PdmParser_LVAL parserlval
#include <iostream>
#include <fstream>

int yylex();
void yyerror(char *);
#include <string>
#include <stack>

using namespace std;

#include <data/atomic.h>
#include <data/parameter.h>
#include <data/graphic.h>
#include <data/coupled.h>

typedef struct 
{
	int i;
	string s;
	double d;
  StringParameter *sp;
  ValueParameter *vp;
  ListParameter *lpar;
	Atomic *a;
	vector<Parameter*> lp;
  vector<Port> lport;
  vector<string> lstr;
  Port port;
	Graphic g;
	Graphic::Direction gd;
	Coupled *c;
} pdm_parser_val;

#line 64 "parser.y"

#include <data/model.h>
#include <data/atomic.h>
using namespace std;
extern Coupled *current_coupled;
stack<Coupled*> coupled_stack;

#line 88 "/usr/share/bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_PdmParser_BISON 1

#ifndef YY_PdmParser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_PdmParser_COMPATIBILITY 1
 #else
  #define  YY_PdmParser_COMPATIBILITY 0
 #endif
#endif

#if YY_PdmParser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_PdmParser_LTYPE
   #define YY_PdmParser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_PdmParser_STYPE 
   #define YY_PdmParser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_PdmParser_DEBUG
   #define  YY_PdmParser_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_PdmParser_USE_GOTO
  #define YY_PdmParser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_PdmParser_USE_GOTO
 #define YY_PdmParser_USE_GOTO 0
#endif

#ifndef YY_PdmParser_PURE

 #line 130 "/usr/share/bison++/bison.cc"

#line 130 "/usr/share/bison++/bison.cc"
/*  YY_PdmParser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "/usr/share/bison++/bison.cc"

#line 134 "/usr/share/bison++/bison.cc"
/* prefix */
#ifndef YY_PdmParser_DEBUG

 #line 136 "/usr/share/bison++/bison.cc"
#define YY_PdmParser_DEBUG 1

#line 136 "/usr/share/bison++/bison.cc"
/* YY_PdmParser_DEBUG */
#endif


#ifndef YY_PdmParser_LSP_NEEDED

 #line 141 "/usr/share/bison++/bison.cc"

#line 141 "/usr/share/bison++/bison.cc"
 /* YY_PdmParser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_PdmParser_LSP_NEEDED
#ifndef YY_PdmParser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_PdmParser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_PdmParser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_PdmParser_STYPE
#define YY_PdmParser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_PdmParser_PARSE
#define YY_PdmParser_PARSE yyparse
#endif
#ifndef YY_PdmParser_LEX
#define YY_PdmParser_LEX yylex
#endif
#ifndef YY_PdmParser_LVAL
#define YY_PdmParser_LVAL yylval
#endif
#ifndef YY_PdmParser_LLOC
#define YY_PdmParser_LLOC yylloc
#endif
#ifndef YY_PdmParser_CHAR
#define YY_PdmParser_CHAR yychar
#endif
#ifndef YY_PdmParser_NERRS
#define YY_PdmParser_NERRS yynerrs
#endif
#ifndef YY_PdmParser_DEBUG_FLAG
#define YY_PdmParser_DEBUG_FLAG yydebug
#endif
#ifndef YY_PdmParser_ERROR
#define YY_PdmParser_ERROR yyerror
#endif

#ifndef YY_PdmParser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_PdmParser_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_PdmParser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_PdmParser_PARSE_PARAM
  #define YY_PdmParser_PARSE_PARAM void
 #endif
#endif

#if YY_PdmParser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_PdmParser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_PdmParser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_PdmParser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_PdmParser_PURE
#  ifndef YYPURE
#    define YYPURE YY_PdmParser_PURE
#  endif
#endif

#ifdef YY_PdmParser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_PdmParser_DEBUG 
#  endif
#endif

#ifndef YY_PdmParser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_PdmParser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_PdmParser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_PdmParser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "/usr/share/bison++/bison.cc"
#define	TOKCOUPLED	258
#define	TOKROOT	259
#define	TOKOBRACE	260
#define	TOKCBRACE	261
#define	TOKTYPE	262
#define	TOKNAME	263
#define	TOKPORTS	264
#define	TOKGRAPHIC	265
#define	TOKPOINTS	266
#define	TOKCHILD	267
#define	TOKDESCRIPTION	268
#define	TOKPARAMETERS	269
#define	TOKSYSTEM	270
#define	TOKATOMIC	271
#define	TOKPATH	272
#define	TOKPOINT	273
#define	TOKLINE	274
#define	TOKINPORT	275
#define	TOKOUTPORT	276
#define	TOKCOUPLEDPORT	277
#define	TOKCONNECTEDLINES	278
#define	TOKCONECTEDEXTREMS	279
#define	TOKPOSITION	280
#define	TOKSOURCE	281
#define	TOKSINK	282
#define	TOKPOINTX	283
#define	TOKPOINTY	284
#define	TOKVAL	285
#define	TOKSTR	286
#define	TOKLST	287
#define	TOKCOLON	288
#define	TOKPERC	289
#define	TOKEQUAL	290
#define	TOKPNT	291
#define	TOKCMP	292
#define	TOKPRT	293
#define	TOKNOC	294
#define	TOKFROM	295
#define	TOKTO	296
#define	TOKEXTERNAL	297
#define	TOKLABEL	298
#define	TOKOF	299
#define	TOKINTERNAL	300
#define	TOKARROW	301
#define	TOKNONE	302
#define	TOKDST	303
#define	TOKORG	304
#define	TOKROOTCOORD	305
#define	TOKSIMULATOR	306
#define	TOKCOORDINATOR	307
#define	TOKEIC	308
#define	TOKEOC	309
#define	TOKCOMMA	310
#define	TOKIC	311
#define	TOKOPAR	312
#define	TOKCPAR	313
#define	TOKDIMENSION	314
#define	TOKDIRECTION	315
#define	TOKCOLOR	316
#define	TOKICON	317
#define	TOKWINDOW	318
#define	TOKLEFT	319
#define	TOKRIGHT	320
#define	TOKUP	321
#define	TOKDOWN	322
#define	TOKLINES	323
#define	TOKQUOTEDSTR	324
#define	TOKINTEGER	325
#define	TOKDOUBLE	326


#line 263 "/usr/share/bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_PdmParser_CLASS
#define YY_PdmParser_CLASS PdmParser
#endif
#ifndef YY_PdmParser_INHERIT
#define YY_PdmParser_INHERIT
#endif
#ifndef YY_PdmParser_MEMBERS
#define YY_PdmParser_MEMBERS 
#endif
#ifndef YY_PdmParser_LEX_BODY
#define YY_PdmParser_LEX_BODY  
#endif
#ifndef YY_PdmParser_ERROR_BODY
#define YY_PdmParser_ERROR_BODY  
#endif
#ifndef YY_PdmParser_CONSTRUCTOR_PARAM
#define YY_PdmParser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_PdmParser_CONSTRUCTOR_CODE
#define YY_PdmParser_CONSTRUCTOR_CODE
#endif
#ifndef YY_PdmParser_CONSTRUCTOR_INIT
#define YY_PdmParser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_PdmParser_USE_CONST_TOKEN
#define YY_PdmParser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_PdmParser_USE_CONST_TOKEN != 0
#ifndef YY_PdmParser_ENUM_TOKEN
#define YY_PdmParser_ENUM_TOKEN yy_PdmParser_enum_token
#endif
#endif

class YY_PdmParser_CLASS YY_PdmParser_INHERIT
{
public: 
#if YY_PdmParser_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "/usr/share/bison++/bison.cc"
static const int TOKCOUPLED;
static const int TOKROOT;
static const int TOKOBRACE;
static const int TOKCBRACE;
static const int TOKTYPE;
static const int TOKNAME;
static const int TOKPORTS;
static const int TOKGRAPHIC;
static const int TOKPOINTS;
static const int TOKCHILD;
static const int TOKDESCRIPTION;
static const int TOKPARAMETERS;
static const int TOKSYSTEM;
static const int TOKATOMIC;
static const int TOKPATH;
static const int TOKPOINT;
static const int TOKLINE;
static const int TOKINPORT;
static const int TOKOUTPORT;
static const int TOKCOUPLEDPORT;
static const int TOKCONNECTEDLINES;
static const int TOKCONECTEDEXTREMS;
static const int TOKPOSITION;
static const int TOKSOURCE;
static const int TOKSINK;
static const int TOKPOINTX;
static const int TOKPOINTY;
static const int TOKVAL;
static const int TOKSTR;
static const int TOKLST;
static const int TOKCOLON;
static const int TOKPERC;
static const int TOKEQUAL;
static const int TOKPNT;
static const int TOKCMP;
static const int TOKPRT;
static const int TOKNOC;
static const int TOKFROM;
static const int TOKTO;
static const int TOKEXTERNAL;
static const int TOKLABEL;
static const int TOKOF;
static const int TOKINTERNAL;
static const int TOKARROW;
static const int TOKNONE;
static const int TOKDST;
static const int TOKORG;
static const int TOKROOTCOORD;
static const int TOKSIMULATOR;
static const int TOKCOORDINATOR;
static const int TOKEIC;
static const int TOKEOC;
static const int TOKCOMMA;
static const int TOKIC;
static const int TOKOPAR;
static const int TOKCPAR;
static const int TOKDIMENSION;
static const int TOKDIRECTION;
static const int TOKCOLOR;
static const int TOKICON;
static const int TOKWINDOW;
static const int TOKLEFT;
static const int TOKRIGHT;
static const int TOKUP;
static const int TOKDOWN;
static const int TOKLINES;
static const int TOKQUOTEDSTR;
static const int TOKINTEGER;
static const int TOKDOUBLE;


#line 307 "/usr/share/bison++/bison.cc"
 /* decl const */
#else
enum YY_PdmParser_ENUM_TOKEN { YY_PdmParser_NULL_TOKEN=0

 #line 310 "/usr/share/bison++/bison.cc"
	,TOKCOUPLED=258
	,TOKROOT=259
	,TOKOBRACE=260
	,TOKCBRACE=261
	,TOKTYPE=262
	,TOKNAME=263
	,TOKPORTS=264
	,TOKGRAPHIC=265
	,TOKPOINTS=266
	,TOKCHILD=267
	,TOKDESCRIPTION=268
	,TOKPARAMETERS=269
	,TOKSYSTEM=270
	,TOKATOMIC=271
	,TOKPATH=272
	,TOKPOINT=273
	,TOKLINE=274
	,TOKINPORT=275
	,TOKOUTPORT=276
	,TOKCOUPLEDPORT=277
	,TOKCONNECTEDLINES=278
	,TOKCONECTEDEXTREMS=279
	,TOKPOSITION=280
	,TOKSOURCE=281
	,TOKSINK=282
	,TOKPOINTX=283
	,TOKPOINTY=284
	,TOKVAL=285
	,TOKSTR=286
	,TOKLST=287
	,TOKCOLON=288
	,TOKPERC=289
	,TOKEQUAL=290
	,TOKPNT=291
	,TOKCMP=292
	,TOKPRT=293
	,TOKNOC=294
	,TOKFROM=295
	,TOKTO=296
	,TOKEXTERNAL=297
	,TOKLABEL=298
	,TOKOF=299
	,TOKINTERNAL=300
	,TOKARROW=301
	,TOKNONE=302
	,TOKDST=303
	,TOKORG=304
	,TOKROOTCOORD=305
	,TOKSIMULATOR=306
	,TOKCOORDINATOR=307
	,TOKEIC=308
	,TOKEOC=309
	,TOKCOMMA=310
	,TOKIC=311
	,TOKOPAR=312
	,TOKCPAR=313
	,TOKDIMENSION=314
	,TOKDIRECTION=315
	,TOKCOLOR=316
	,TOKICON=317
	,TOKWINDOW=318
	,TOKLEFT=319
	,TOKRIGHT=320
	,TOKUP=321
	,TOKDOWN=322
	,TOKLINES=323
	,TOKQUOTEDSTR=324
	,TOKINTEGER=325
	,TOKDOUBLE=326


#line 310 "/usr/share/bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_PdmParser_PARSE (YY_PdmParser_PARSE_PARAM);
 virtual void YY_PdmParser_ERROR(char *msg) YY_PdmParser_ERROR_BODY;
#ifdef YY_PdmParser_PURE
#ifdef YY_PdmParser_LSP_NEEDED
 virtual int  YY_PdmParser_LEX (YY_PdmParser_STYPE *YY_PdmParser_LVAL,YY_PdmParser_LTYPE *YY_PdmParser_LLOC) YY_PdmParser_LEX_BODY;
#else
 virtual int  YY_PdmParser_LEX (YY_PdmParser_STYPE *YY_PdmParser_LVAL) YY_PdmParser_LEX_BODY;
#endif
#else
 virtual int YY_PdmParser_LEX() YY_PdmParser_LEX_BODY;
 YY_PdmParser_STYPE YY_PdmParser_LVAL;
#ifdef YY_PdmParser_LSP_NEEDED
 YY_PdmParser_LTYPE YY_PdmParser_LLOC;
#endif
 int   YY_PdmParser_NERRS;
 int    YY_PdmParser_CHAR;
#endif
#if YY_PdmParser_DEBUG != 0
 int YY_PdmParser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_PdmParser_CLASS(YY_PdmParser_CONSTRUCTOR_PARAM);
public:
 YY_PdmParser_MEMBERS 
};
/* other declare folow */
#if YY_PdmParser_USE_CONST_TOKEN != 0

 #line 341 "/usr/share/bison++/bison.cc"
const int YY_PdmParser_CLASS::TOKCOUPLED=258;
const int YY_PdmParser_CLASS::TOKROOT=259;
const int YY_PdmParser_CLASS::TOKOBRACE=260;
const int YY_PdmParser_CLASS::TOKCBRACE=261;
const int YY_PdmParser_CLASS::TOKTYPE=262;
const int YY_PdmParser_CLASS::TOKNAME=263;
const int YY_PdmParser_CLASS::TOKPORTS=264;
const int YY_PdmParser_CLASS::TOKGRAPHIC=265;
const int YY_PdmParser_CLASS::TOKPOINTS=266;
const int YY_PdmParser_CLASS::TOKCHILD=267;
const int YY_PdmParser_CLASS::TOKDESCRIPTION=268;
const int YY_PdmParser_CLASS::TOKPARAMETERS=269;
const int YY_PdmParser_CLASS::TOKSYSTEM=270;
const int YY_PdmParser_CLASS::TOKATOMIC=271;
const int YY_PdmParser_CLASS::TOKPATH=272;
const int YY_PdmParser_CLASS::TOKPOINT=273;
const int YY_PdmParser_CLASS::TOKLINE=274;
const int YY_PdmParser_CLASS::TOKINPORT=275;
const int YY_PdmParser_CLASS::TOKOUTPORT=276;
const int YY_PdmParser_CLASS::TOKCOUPLEDPORT=277;
const int YY_PdmParser_CLASS::TOKCONNECTEDLINES=278;
const int YY_PdmParser_CLASS::TOKCONECTEDEXTREMS=279;
const int YY_PdmParser_CLASS::TOKPOSITION=280;
const int YY_PdmParser_CLASS::TOKSOURCE=281;
const int YY_PdmParser_CLASS::TOKSINK=282;
const int YY_PdmParser_CLASS::TOKPOINTX=283;
const int YY_PdmParser_CLASS::TOKPOINTY=284;
const int YY_PdmParser_CLASS::TOKVAL=285;
const int YY_PdmParser_CLASS::TOKSTR=286;
const int YY_PdmParser_CLASS::TOKLST=287;
const int YY_PdmParser_CLASS::TOKCOLON=288;
const int YY_PdmParser_CLASS::TOKPERC=289;
const int YY_PdmParser_CLASS::TOKEQUAL=290;
const int YY_PdmParser_CLASS::TOKPNT=291;
const int YY_PdmParser_CLASS::TOKCMP=292;
const int YY_PdmParser_CLASS::TOKPRT=293;
const int YY_PdmParser_CLASS::TOKNOC=294;
const int YY_PdmParser_CLASS::TOKFROM=295;
const int YY_PdmParser_CLASS::TOKTO=296;
const int YY_PdmParser_CLASS::TOKEXTERNAL=297;
const int YY_PdmParser_CLASS::TOKLABEL=298;
const int YY_PdmParser_CLASS::TOKOF=299;
const int YY_PdmParser_CLASS::TOKINTERNAL=300;
const int YY_PdmParser_CLASS::TOKARROW=301;
const int YY_PdmParser_CLASS::TOKNONE=302;
const int YY_PdmParser_CLASS::TOKDST=303;
const int YY_PdmParser_CLASS::TOKORG=304;
const int YY_PdmParser_CLASS::TOKROOTCOORD=305;
const int YY_PdmParser_CLASS::TOKSIMULATOR=306;
const int YY_PdmParser_CLASS::TOKCOORDINATOR=307;
const int YY_PdmParser_CLASS::TOKEIC=308;
const int YY_PdmParser_CLASS::TOKEOC=309;
const int YY_PdmParser_CLASS::TOKCOMMA=310;
const int YY_PdmParser_CLASS::TOKIC=311;
const int YY_PdmParser_CLASS::TOKOPAR=312;
const int YY_PdmParser_CLASS::TOKCPAR=313;
const int YY_PdmParser_CLASS::TOKDIMENSION=314;
const int YY_PdmParser_CLASS::TOKDIRECTION=315;
const int YY_PdmParser_CLASS::TOKCOLOR=316;
const int YY_PdmParser_CLASS::TOKICON=317;
const int YY_PdmParser_CLASS::TOKWINDOW=318;
const int YY_PdmParser_CLASS::TOKLEFT=319;
const int YY_PdmParser_CLASS::TOKRIGHT=320;
const int YY_PdmParser_CLASS::TOKUP=321;
const int YY_PdmParser_CLASS::TOKDOWN=322;
const int YY_PdmParser_CLASS::TOKLINES=323;
const int YY_PdmParser_CLASS::TOKQUOTEDSTR=324;
const int YY_PdmParser_CLASS::TOKINTEGER=325;
const int YY_PdmParser_CLASS::TOKDOUBLE=326;


#line 341 "/usr/share/bison++/bison.cc"
 /* const YY_PdmParser_CLASS::token */
#endif
/*apres const  */
YY_PdmParser_CLASS::YY_PdmParser_CLASS(YY_PdmParser_CONSTRUCTOR_PARAM) YY_PdmParser_CONSTRUCTOR_INIT
{
#if YY_PdmParser_DEBUG != 0
YY_PdmParser_DEBUG_FLAG=0;
#endif
YY_PdmParser_CONSTRUCTOR_CODE;
};
#endif

 #line 352 "/usr/share/bison++/bison.cc"


#define	YYFINAL		242
#define	YYFLAG		-32768
#define	YYNTBASE	72

#define YYTRANSLATE(x) ((unsigned)(x) <= 326 ? yytranslate[x] : 102)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71
};

#if YY_PdmParser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,    22,    28,    29,    32,    53,    55,    57,
    63,    66,    70,    72,    73,    76,    87,    89,    93,    94,
    97,   100,   120,   121,   156,   157,   160,   181,   185,   190,
   195,   200,   212,   213,   215,   219,   220,   243,   245,   247,
   249,   251,   256,   257,   260,   263,   266,   274,   282,   294,
   295,   297
};

static const short yyrhs[] = {    73,
     0,     0,    74,     3,     5,     8,    35,    69,     9,    35,
    70,    33,    70,    13,    35,    69,    96,    75,    85,     6,
     0,    15,     5,    83,    88,     6,     0,     0,    77,    76,
     0,     5,    40,    35,    79,    41,    35,    79,    43,    35,
    69,    61,    35,    70,    28,    35,    82,    29,    35,    82,
     6,     0,    20,     0,    21,     0,    78,    70,    44,    12,
    70,     0,    18,    70,     0,    42,    78,    70,     0,    39,
     0,     0,    81,    80,     0,     5,    23,    35,    82,    25,
    35,    70,    33,    70,     6,     0,    70,     0,    82,    33,
    70,     0,     0,    84,    83,     0,    73,    83,     0,    16,
     5,     8,    35,    69,     9,    35,    70,    33,    70,    17,
    35,    69,    13,    35,    69,    96,    94,     6,     0,     0,
    10,     5,    25,    35,    70,    33,    70,    59,    35,    70,
    33,    70,    60,    35,    95,    61,    35,    70,    62,    35,
    69,     9,     5,    86,     6,    11,     5,    80,     6,    68,
     5,    76,     6,     6,     0,     0,    87,    86,     0,    78,
     5,     8,    35,    69,    13,    35,    69,    25,    35,    70,
    33,    70,    59,    35,    70,    60,    35,    95,     6,     0,
    89,    90,    91,     0,    56,     5,    93,     6,     0,    53,
     5,    93,     6,     0,    54,     5,    93,     6,     0,    57,
    70,    55,    70,    58,    46,    57,    70,    55,    70,    58,
     0,     0,    92,     0,    93,    55,    92,     0,     0,    10,
     5,    25,    35,    70,    33,    70,    59,    35,    70,    33,
    70,    60,    35,    95,    61,    35,    70,    62,    35,    69,
     6,     0,    66,     0,    67,     0,    64,     0,    65,     0,
    14,     5,    97,     6,     0,     0,    97,    98,     0,    97,
    99,     0,    97,   100,     0,    69,    35,    31,    33,    69,
    33,    69,     0,    69,    35,    30,    33,    71,    33,    69,
     0,    69,    35,    32,    33,    70,    33,     5,   101,     6,
    33,    69,     0,     0,    69,     0,   101,    55,    69,     0
};

#endif

#if (YY_PdmParser_DEBUG != 0) || defined(YY_PdmParser_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
   156,   158,   161,   183,   190,   191,   193,   203,   204,   206,
   208,   209,   210,   211,   212,   215,   220,   221,   223,   224,
   225,   227,   245,   246,   271,   272,   280,   298,   303,   309,
   315,   321,   323,   324,   325,   326,   327,   346,   346,   346,
   346,   348,   355,   356,   357,   358,   360,   362,   364,   367,
   368,   369
};

static const char * const yytname[] = {   "$","error","$illegal.","TOKCOUPLED",
"TOKROOT","TOKOBRACE","TOKCBRACE","TOKTYPE","TOKNAME","TOKPORTS","TOKGRAPHIC",
"TOKPOINTS","TOKCHILD","TOKDESCRIPTION","TOKPARAMETERS","TOKSYSTEM","TOKATOMIC",
"TOKPATH","TOKPOINT","TOKLINE","TOKINPORT","TOKOUTPORT","TOKCOUPLEDPORT","TOKCONNECTEDLINES",
"TOKCONECTEDEXTREMS","TOKPOSITION","TOKSOURCE","TOKSINK","TOKPOINTX","TOKPOINTY",
"TOKVAL","TOKSTR","TOKLST","TOKCOLON","TOKPERC","TOKEQUAL","TOKPNT","TOKCMP",
"TOKPRT","TOKNOC","TOKFROM","TOKTO","TOKEXTERNAL","TOKLABEL","TOKOF","TOKINTERNAL",
"TOKARROW","TOKNONE","TOKDST","TOKORG","TOKROOTCOORD","TOKSIMULATOR","TOKCOORDINATOR",
"TOKEIC","TOKEOC","TOKCOMMA","TOKIC","TOKOPAR","TOKCPAR","TOKDIMENSION","TOKDIRECTION",
"TOKCOLOR","TOKICON","TOKWINDOW","TOKLEFT","TOKRIGHT","TOKUP","TOKDOWN","TOKLINES",
"TOKQUOTEDSTR","TOKINTEGER","TOKDOUBLE","input","coupled","@1","system","line_list",
"line","in_out","connection_point","point_list","point","integer_list","child_list",
"atomic","coupled_graphics","port_list","port","connections","ic","eic","eoc",
"connection","connection_list","atomic_graphics","direction","parameters","params_list",
"param_string","param_value","param_string_list","string_list",""
};
#endif

static const short yyr1[] = {     0,
    72,    74,    73,    75,    76,    76,    77,    78,    78,    79,
    79,    79,    79,    80,    80,    81,    82,    82,    83,    83,
    83,    84,    85,    85,    86,    86,    87,    88,    89,    90,
    91,    92,    93,    93,    93,    94,    94,    95,    95,    95,
    95,    96,    97,    97,    97,    97,    98,    99,   100,   101,
   101,   101
};

static const short yyr2[] = {     0,
     1,     0,    18,     5,     0,     2,    20,     1,     1,     5,
     2,     3,     1,     0,     2,    10,     1,     3,     0,     2,
     2,    19,     0,    34,     0,     2,    20,     3,     4,     4,
     4,    11,     0,     1,     3,     0,    22,     1,     1,     1,
     1,     4,     0,     2,     2,     2,     7,     7,    11,     0,
     1,     3
};

static const short yydefact[] = {     2,
     1,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    43,     0,    23,
     0,     2,     0,     0,    42,     0,    44,    45,    46,     0,
     2,     0,     2,     0,     3,     0,     0,    21,     0,     0,
     0,    20,     0,     0,     0,     0,     0,    33,     4,     0,
     0,     0,     0,     0,     0,     0,     0,    34,     0,    33,
     0,    28,     0,     0,     0,     0,     0,     0,    29,     0,
     0,    33,     0,     0,     0,     0,     0,     0,    35,    30,
     0,     0,    48,    47,    50,     0,     0,    31,     0,    51,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    52,     0,     0,     0,    49,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    32,    40,    41,    38,    39,
     0,     0,     0,     0,     0,    36,     0,     0,     0,     0,
     0,    22,     0,     0,     0,     0,     0,     0,    25,     0,
     8,     9,     0,     0,    25,     0,     0,     0,    26,     0,
     0,     0,     0,     0,    14,     0,     0,     0,     0,    14,
     0,     0,     0,     0,    15,     0,     0,     0,     0,     0,
     0,    17,     0,     5,     0,     0,     0,     0,     0,     0,
     5,     0,     0,     0,    18,     0,     0,     6,     0,     0,
     0,     0,    24,     0,     0,     0,     0,    13,     0,     0,
     0,     0,     0,     0,    11,     0,     0,     0,     0,     0,
    16,    12,     0,     0,     0,     0,     0,     0,     0,     0,
    10,     0,    37,     0,     0,     0,     0,     0,     0,    27,
     0,     0,     0,     0,     0,     0,     0,     0,     7,     0,
     0,     0
};

static const short yydefgoto[] = {   240,
    31,     2,    20,   180,   181,   143,   201,   159,   160,   173,
    32,    33,    24,   144,   145,    40,    41,    51,    62,    58,
    59,   129,   121,    17,    21,    27,    28,    29,    91
};

static const short yypact[] = {-32768,
-32768,    12,    14,    22,     4,   -36,    32,     9,   -28,    13,
   -25,    34,    15,   -21,    35,    51,    42,-32768,    53,    49,
    -6,   -13,    55,    56,-32768,    26,-32768,-32768,-32768,    59,
   -13,    10,   -13,    40,-32768,     5,    60,-32768,    62,    63,
    17,-32768,    36,    39,    41,    43,    38,    18,-32768,    72,
    24,    11,     8,    16,    19,    21,    23,-32768,    -4,    18,
    75,-32768,    50,    54,    58,    61,    73,    29,-32768,    18,
    -2,    18,    25,    27,    28,    81,    57,    30,-32768,-32768,
    -1,    44,-32768,-32768,    33,    31,    46,-32768,    64,-32768,
     0,    65,    66,    37,    76,    45,    47,    48,    77,    52,
-32768,    71,    67,    68,-32768,    78,    69,    70,    74,    79,
    80,    93,    82,   -39,    83,-32768,-32768,-32768,-32768,-32768,
    84,    85,    87,    35,    86,    98,    88,   106,   110,    90,
    94,-32768,    89,    91,   111,    92,   118,    95,     2,    96,
-32768,-32768,   122,   123,     2,   100,   124,   120,-32768,    99,
   101,   128,    97,   102,   130,   108,   126,   119,   138,   130,
   103,   112,   113,   104,-32768,   105,   107,   109,   141,   116,
   127,-32768,   -12,   148,   -39,   125,   129,   114,   115,   151,
   148,   117,   121,   131,-32768,   133,   155,-32768,   134,   137,
   142,   -10,-32768,   132,   135,   136,   139,-32768,     2,   140,
   144,   145,   149,   157,-32768,   143,   146,   147,   152,   153,
-32768,-32768,   162,   -10,   150,   154,   156,   160,   171,   158,
-32768,   159,-32768,   161,   163,   -39,   164,   174,   165,-32768,
   166,   167,   169,   109,   -15,   176,   109,     1,-32768,   181,
   183,-32768
};

static const short yypgoto[] = {-32768,
   186,-32768,-32768,   168,-32768,  -183,   -22,   170,-32768,  -217,
     7,-32768,-32768,   172,-32768,-32768,-32768,-32768,-32768,   173,
   -48,-32768,  -174,   175,-32768,-32768,-32768,-32768,-32768
};


#define	YYLAST		349


static const short yytable[] = {    25,
   182,    69,    30,    80,    88,    95,   239,   197,   200,   141,
   142,    71,   177,   236,     3,   206,   235,   178,     4,   238,
   178,   141,   142,    81,   117,   118,   119,   120,   198,     5,
   200,   199,     7,   178,    44,    45,    46,    38,     6,    42,
     8,    10,   -19,     9,    12,    11,    13,    15,    16,    14,
    70,   228,    70,    70,    96,    18,    19,    22,    23,    34,
    36,    35,    26,    37,    43,    39,    48,    47,    49,    50,
    52,    53,    56,    54,    57,    55,    60,    61,    64,    72,
    63,    77,    73,    78,    65,    85,    74,   106,    66,    67,
    75,    86,    68,    76,    82,    83,    84,    97,    94,    87,
    92,    90,    89,    93,   103,   115,    99,   128,   100,   104,
   131,    98,   109,   101,   114,   132,   102,   122,   134,   137,
   105,   125,   139,   110,   133,   136,   147,   140,   148,   111,
   152,   151,   155,   153,   158,   154,   107,   108,   162,   116,
   161,   163,   112,   164,   123,   174,   167,   168,   113,   130,
   175,   176,   179,   124,   186,   127,   187,   135,   150,   183,
   193,   138,   211,   184,   170,   146,   156,   192,   194,   195,
   157,   169,   166,   217,   196,   171,   223,   189,   172,   230,
   241,   214,   242,   185,   208,     1,   215,   216,     0,   213,
   190,   218,     0,   225,   233,   226,     0,     0,     0,   231,
   191,   202,   222,   234,   203,   204,   209,   210,   205,   207,
   237,     0,   212,     0,     0,     0,     0,   224,   219,     0,
     0,     0,     0,   220,   229,   221,     0,     0,     0,     0,
     0,   227,     0,     0,     0,   232,     0,     0,     0,     0,
     0,     0,    79,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   126,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   149,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   165,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   188
};

static const short yycheck[] = {     6,
   175,     6,    16,     6,     6,     6,     6,    18,   192,    20,
    21,    60,    25,    29,     3,   199,   234,    33,     5,   237,
    33,    20,    21,    72,    64,    65,    66,    67,    39,     8,
   214,    42,    69,    33,    30,    31,    32,    31,    35,    33,
     9,    70,    56,    35,    70,    33,    13,    69,    14,    35,
    55,   226,    55,    55,    55,     5,    15,     5,    10,     5,
    35,     6,    69,     5,    25,    56,     5,     8,     6,    53,
    35,    33,    35,    33,    57,    33,     5,    54,    71,     5,
    70,     9,    33,    55,    69,     5,    33,    17,    70,    69,
    33,    35,    70,    33,    70,    69,    69,    33,    35,    70,
    70,    69,    59,    58,    57,    13,    70,    10,    33,    33,
     5,    46,    35,    69,    35,     6,    70,    35,    25,     9,
    69,    35,     5,    55,    35,    35,     5,    33,     6,    60,
    11,     8,     5,    35,     5,    35,    70,    70,    13,    58,
    33,    23,    69,     6,    61,     5,    35,    35,    70,    62,
    35,    25,     5,    69,    40,    70,     6,    69,    59,    35,
     6,    70,     6,    35,    60,    70,    70,    35,    35,    33,
    69,    68,    70,    12,    33,    69,     6,    61,    70,     6,
     0,    35,     0,    70,    41,     0,    35,    35,    -1,    44,
    70,   214,    -1,    35,    28,    35,    -1,    -1,    -1,    35,
    70,    70,    43,    35,    70,    70,    62,    59,    70,    70,
    35,    -1,    70,    -1,    -1,    -1,    -1,    60,    69,    -1,
    -1,    -1,    -1,    70,    61,    70,    -1,    -1,    -1,    -1,
    -1,    69,    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,
    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   145,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   160,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   181
};

#line 352 "/usr/share/bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_PdmParser_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  };
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL 
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_PdmParser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_PdmParser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_PdmParser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_PdmParser_CHAR = (token), YY_PdmParser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_PdmParser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_PdmParser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_PdmParser_PURE
/* UNPURE */
#define YYLEX           YY_PdmParser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_PdmParser_CHAR;                      /*  the lookahead symbol        */
YY_PdmParser_STYPE      YY_PdmParser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_PdmParser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_PdmParser_LSP_NEEDED
YY_PdmParser_LTYPE YY_PdmParser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_PdmParser_LSP_NEEDED
#define YYLEX           YY_PdmParser_LEX(&YY_PdmParser_LVAL, &YY_PdmParser_LLOC)
#else
#define YYLEX           YY_PdmParser_LEX(&YY_PdmParser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_PdmParser_DEBUG != 0
int YY_PdmParser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_PdmParser_CLASS::
#endif
     YY_PdmParser_PARSE(YY_PdmParser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_PdmParser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_PdmParser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_PdmParser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_PdmParser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_PdmParser_LSP_NEEDED
  YY_PdmParser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_PdmParser_LTYPE *yyls = yylsa;
  YY_PdmParser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_PdmParser_PURE
  int YY_PdmParser_CHAR;
  YY_PdmParser_STYPE YY_PdmParser_LVAL;
  int YY_PdmParser_NERRS;
#ifdef YY_PdmParser_LSP_NEEDED
  YY_PdmParser_LTYPE YY_PdmParser_LLOC;
#endif
#endif

  YY_PdmParser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_PdmParser_DEBUG != 0
  if (YY_PdmParser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_PdmParser_NERRS = 0;
  YY_PdmParser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_PdmParser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_PdmParser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_PdmParser_LSP_NEEDED
      YY_PdmParser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_PdmParser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_PdmParser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  YY_PdmParser_ERROR("parser stack overflow");
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_PdmParser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_PdmParser_LSP_NEEDED
      yyls = (YY_PdmParser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_PdmParser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_PdmParser_DEBUG != 0
      if (YY_PdmParser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_PdmParser_DEBUG != 0
  if (YY_PdmParser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_PdmParser_CHAR == YYEMPTY)
    {
#if YY_PdmParser_DEBUG != 0
      if (YY_PdmParser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_PdmParser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_PdmParser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_PdmParser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_PdmParser_DEBUG != 0
      if (YY_PdmParser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_PdmParser_CHAR);

#if YY_PdmParser_DEBUG != 0
      if (YY_PdmParser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_PdmParser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_PdmParser_CHAR, YY_PdmParser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_PdmParser_DEBUG != 0
  if (YY_PdmParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_PdmParser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_PdmParser_CHAR != YYEOF)
    YY_PdmParser_CHAR = YYEMPTY;

  *++yyvsp = YY_PdmParser_LVAL;
#ifdef YY_PdmParser_LSP_NEEDED
  *++yylsp = YY_PdmParser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_PdmParser_DEBUG != 0
  if (YY_PdmParser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 839 "/usr/share/bison++/bison.cc"

  switch (yyn) {

case 2:
#line 158 "parser.y"
{ coupled_stack.push(current_coupled); 
           current_coupled=new Coupled(); ;
    break;}
case 3:
#line 169 "parser.y"
{
            current_coupled->setName(yyvsp[-12].s);
            //current_coupled->setDescription($13);
					  current_coupled->setInports(yyvsp[-9].i);
					  current_coupled->setOutports(yyvsp[-7].i); 
						Coupled *father=coupled_stack.top();
            yyval.c = current_coupled;
						coupled_stack.pop();
						current_coupled->setFather(father);
						if (father!=NULL) 
							current_coupled=father;
					;
    break;}
case 8:
#line 203 "parser.y"
{ yyval.i = 0; ;
    break;}
case 9:
#line 204 "parser.y"
{ yyval.i = 1; ;
    break;}
case 20:
#line 224 "parser.y"
{ current_coupled->addChild(yyvsp[-1].a); ;
    break;}
case 21:
#line 225 "parser.y"
{ current_coupled->addChild(yyvsp[-1].c); ;
    break;}
case 22:
#line 236 "parser.y"
{
					yyval.a = new Atomic(current_coupled,yyvsp[-14].s,yyvsp[-3].s);	
					yyval.a->setInports(yyvsp[-11].i);
					yyval.a->setOutports(yyvsp[-9].i); 
					yyval.a->setPath(yyvsp[-6].s); 
					yyval.a->setGraphics(yyvsp[-1].g); 
					yyval.a->setParameters(yyvsp[-2].lp);
				;
    break;}
case 23:
#line 245 "parser.y"
{ yyval.g = NoGraphic(); ;
    break;}
case 24:
#line 268 "parser.y"
{ yyval.g = NoGraphic(); ;
    break;}
case 25:
#line 271 "parser.y"
{;
    break;}
case 26:
#line 273 "parser.y"
{
      if (yyvsp[-1].port.type()==0)
        current_coupled->addInport(yyvsp[-1].port);
      else
        current_coupled->addOutport(yyvsp[-1].port);
    ;
    break;}
case 27:
#line 288 "parser.y"
{
        Graphic g;
        g.setX(yyvsp[-9].i);
        g.setY(yyvsp[-7].i);
        g.setWidth(yyvsp[-4].i);
        g.setDirection(yyvsp[-1].gd);
        yyval.port = Port(yyvsp[-19].i,yyvsp[-15].s,yyvsp[-12].s,g);
      ;
    break;}
case 36:
#line 326 "parser.y"
{ yyval.g = NoGraphic(); ;
    break;}
case 37:
#line 335 "parser.y"
{
					yyval.g = AtomicGraphic();
					yyval.g.setX(yyvsp[-17].i);
					yyval.g.setY(yyvsp[-15].i);
					yyval.g.setWidth(yyvsp[-12].i);
					yyval.g.setHeight(yyvsp[-10].i);
					yyval.g.setDirection(yyvsp[-7].gd);
					yyval.g.setColor(yyvsp[-4].i);
					yyval.g.setIcon(yyvsp[-1].s);
				;
    break;}
case 38:
#line 346 "parser.y"
{ yyval.gd = Graphic::UP; ;
    break;}
case 39:
#line 346 "parser.y"
{ yyval.gd = Graphic::DOWN; ;
    break;}
case 40:
#line 346 "parser.y"
{ yyval.gd = Graphic::LEFT; ;
    break;}
case 41:
#line 346 "parser.y"
{ yyval.gd = Graphic::RIGHT; ;
    break;}
case 42:
#line 353 "parser.y"
{ yyval.lp = yyvsp[-1].lp; ;
    break;}
case 43:
#line 355 "parser.y"
{ yyval.lp = vector<Parameter*>(); ;
    break;}
case 44:
#line 356 "parser.y"
{ yyvsp[-1].lp.push_back(yyvsp[0].sp);yyval.lp = yyvsp[-1].lp ;
    break;}
case 45:
#line 357 "parser.y"
{ yyvsp[-1].lp.push_back(yyvsp[0].vp); yyval.lp=yyvsp[-1].lp;;
    break;}
case 46:
#line 358 "parser.y"
{ yyvsp[-1].lp.push_back(yyvsp[0].lpar); yyval.lp=yyvsp[-1].lp;;
    break;}
case 47:
#line 361 "parser.y"
{ yyval.sp = new StringParameter(yyvsp[-6].s,yyvsp[0].s,yyvsp[-2].s); ;
    break;}
case 48:
#line 363 "parser.y"
{ yyval.vp = new ValueParameter(yyvsp[-6].s,yyvsp[0].s,yyvsp[-2].d);;
    break;}
case 49:
#line 365 "parser.y"
{ yyval.lpar = new ListParameter(yyvsp[-10].s,yyvsp[0].s,yyvsp[-3].lstr,yyvsp[-6].i); ;
    break;}
case 50:
#line 367 "parser.y"
{ yyval.lstr = vector<string>(); ;
    break;}
case 51:
#line 368 "parser.y"
{ vector<string> v; v.push_back(yyvsp[0].s); yyval.lstr=v; ;
    break;}
case 52:
#line 369 "parser.y"
{ yyvsp[-2].lstr.push_back(yyvsp[0].s); yyval.lstr = yyvsp[-2].lstr; ;
    break;}
}

#line 839 "/usr/share/bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_PdmParser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_PdmParser_DEBUG != 0
  if (YY_PdmParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_PdmParser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_PdmParser_LLOC.first_line;
      yylsp->first_column = YY_PdmParser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_PdmParser_NERRS;

#ifdef YY_PdmParser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_PdmParser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_PdmParser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_PdmParser_ERROR_VERBOSE */
	YY_PdmParser_ERROR("parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_PdmParser_CHAR == YYEOF)
	YYABORT;

#if YY_PdmParser_DEBUG != 0
      if (YY_PdmParser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_PdmParser_CHAR, yytname[yychar1]);
#endif

      YY_PdmParser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_PdmParser_LSP_NEEDED
  yylsp--;
#endif

#if YY_PdmParser_DEBUG != 0
  if (YY_PdmParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_PdmParser_DEBUG != 0
  if (YY_PdmParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_PdmParser_LVAL;
#ifdef YY_PdmParser_LSP_NEEDED
  *++yylsp = YY_PdmParser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1038 "/usr/share/bison++/bison.cc"
#line 370 "parser.y"



