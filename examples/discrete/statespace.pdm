Coupled
    {
    Type = Root
    Name = statespace
    Ports = 0; 0
    Description = PowerDevs Model
    Graphic
        {
        Position = 0; 0
        Dimension = 150; 150
        Direction = Right
        Color = 15
        Icon = None
        Window = 5000; 5000; 5000; 5000
        }
    Parameters
        {
        }
    System
        {
        Atomic
            {
            Name = GnuPlot 0
            Ports = 1 ; 0
            Path = sinks/gnuplot.h
            Description = Plot input signal using GnuPlot
            Graphic
                {
                Position = 2520 ; -210
                Dimension = 675 ; 720
                Direction = Right
                Color = 15
                Icon = %sinks%gnuplot.svg
                }
            Parameters
                {
                Inputs = Str; %Inputs ; Number of inputs
                Format = Str; set xrange [0:%tf] @ set grid @ set title 'Plot' ; General Formatting (use @ as line break)
                Format1 = Str; with steps title 'First output' ; Formatting options for input 1
                Format2 = Str;  ; Formatting options for input 2
                Format3 = Str;  ; Formatting options for input 3
                Format4 = Str;  ; Formatting options for input 4
                Format5 = Str;  ; Formatting options for input 5
                }
            }
        Atomic
            {
            Name = Vector unit_delay
            Ports = 1 ; 1
            Path = vector/vector_unitdelay.h
            Description = Vector Unit Delay
            Graphic
                {
                Position = -1530 ; -1155
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %vectors%vqoperator.svg
                }
            Parameters
                {
                x0 = Str; 0 ; Initial State (Scilab)
                Ts = Str; 1 ; Sampling Time (Scilab)
                Size = Str; 3 ; Vector Size (Scilab)
                }
            }
        Atomic
            {
            Name = Matrix A
            Ports = 1 ; 1
            Path = vector/matrix_gain.h
            Description = y = A * u, where u and y are vectors and parameter A is a Scilab matrix.
            Graphic
                {
                Position = -4230 ; -1230
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %vectors%matrixgain.svg
                }
            Parameters
                {
                A = Str; [0 1 0\;0 0 1\;0.405 0.81 -0.5] ; Matrix Gain
                }
            }
        Atomic
            {
            Name = Vector WSum0
            Ports = 2 ; 1
            Path = vector\qss_sum_vec.h
            Description = y = K[0] * u0 + K[1] * u1 + ... + K[7] * u7 (QSS1 to 4)
            Graphic
                {
                Position = -2730 ; -1185
                Dimension = 675 ; 720
                Direction = Right
                Color = 15
                Icon = %vectors%sum.svg
                }
            Parameters
                {
                K[0] = Str; 1 ; 
                K[1] = Str; 1 ; 
                K[2] = Str; 0 ; 
                K[3] = Str; 0 ; 
                K[4] = Str; 0 ; 
                K[5] = Str; 0 ; 
                K[6] = Str; 0 ; 
                K[7] = Str; 0 ; 
                Inputs = Str; %Inputs ; 
                Size = Str; 3 ; Vector Size
                }
            }
        Atomic
            {
            Name = Matrix B
            Ports = 1 ; 1
            Path = vector/matrix_gain.h
            Description = y = A * u, where u and y are vectors and parameter A is a Scilab matrix.
            Graphic
                {
                Position = -4230 ; -2880
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %vectors%matrixgain.svg
                }
            Parameters
                {
                A = Str; [0\;0\;1] ; Matrix Gain
                }
            }
        Atomic
            {
            Name = Scalar_to Vector0
            Ports = 1 ; 1
            Path = vector\scalar2vec.h
            Description = Scalar to Vector Signal. Index -1 propagates the input to all outputs.
            Graphic
                {
                Position = -5505 ; -2880
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %vectors%scalar2vec.svg
                }
            Parameters
                {
                Index = Str; 0 ; Signal Index
                }
            }
        Atomic
            {
            Name = Step0
            Ports = 0 ; 1
            Path = sources/step_sci.h
            Description = Step
            Graphic
                {
                Position = -7230 ; -2880
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %sources%step.svg
                }
            Parameters
                {
                u0 = Str; 0 ; initial value (Scilab expression)
                t0 = Str; 0 ; step time  (Scilab expression)
                uf = Str; 1 ; final value  (Scilab expression)
                }
            }
        Atomic
            {
            Name = Vector_to Scalar0
            Ports = 1 ; 1
            Path = vector\vec2scalar.h
            Description = Vector to scalar signal
            Graphic
                {
                Position = 1170 ; -180
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %vectors%vec2scalar.svg
                }
            Parameters
                {
                Index = Str; 0 ; Signal Index
                }
            }
        Point
            {
            ConectedLines = 1 ; 7 ; 8
            ConectedExtrems = Org ; Org ; Org
            Position = -75 ; 75
            }
        Line
            {
            Source = Cmp ;  2 ;  1 ; 0
            Sink = Pnt ;  1 ; -1 ; 0
            PointX = -750 ; -75 ; -75
            PointY = -825 ; -825 ; 75
            }
        Line
            {
            Source = Cmp ;  4 ;  1 ; 0
            Sink = Cmp ;  2 ;  1 ; -1
            PointX = -1950 ; -1950 ; -1665
            PointY = -825 ; -825 ; -825
            }
        Line
            {
            Source = Cmp ;  3 ;  1 ; 0
            Sink = Cmp ;  4 ;  2 ; -1
            PointX = -3450 ; -3450 ; -2865
            PointY = -900 ; -675 ; -675
            }
        Line
            {
            Source = Cmp ;  5 ;  1 ; 0
            Sink = Cmp ;  4 ;  1 ; -1
            PointX = -3450 ; -2865 ; -2865
            PointY = -2550 ; -2550 ; -975
            }
        Line
            {
            Source = Cmp ;  6 ;  1 ; 0
            Sink = Cmp ;  5 ;  1 ; -1
            PointX = -4725 ; -4365 ; -4365
            PointY = -2550 ; -2550 ; -2550
            }
        Line
            {
            Source = Cmp ;  7 ;  1 ; 0
            Sink = Cmp ;  6 ;  1 ; -1
            PointX = -6450 ; -5640 ; -5640
            PointY = -2550 ; -2550 ; -2550
            }
        Line
            {
            Source = Cmp ;  8 ;  1 ; -1
            Sink = Pnt ;  1 ; -1 ; 0
            PointX = 1035 ; -75 ; -75
            PointY = 150 ; 150 ; 75
            }
        Line
            {
            Source = Pnt ;  1 ; -1 ; 0
            Sink = Cmp ;  3 ;  1 ; -1
            PointX = -75 ; -75 ; -4365 ; -4365
            PointY = 75 ; 525 ; 525 ; -900
            }
        Line
            {
            Source = Cmp ;  1 ;  1 ; -1
            Sink = Cmp ;  8 ;  1 ; 0
            PointX = 2385 ; 1950 ; 1950
            PointY = 150 ; 150 ; 150
            }
        }
    }
