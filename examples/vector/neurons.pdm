Coupled
    {
    Type = Root
    Name = neurons
    Ports = 0; 0
    Description = 
    Graphic
        {
        Position = 0; 0
        Dimension = 0; 0
        Direction = Right
        Color = 15
        Icon = 
        Window = 5000; 5000; 5000; 5000
        }
    Parameters
        {
        }
    System
        {
        Atomic
            {
            Name = Scilab Command0
            Ports = 1 ; 0
            Path = Hybrid\runscilabjob.h
            Description = Runs Scilab commands at Init, Exit and when receive events.
            Graphic
                {
                Position = -480 ; -1980
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %sinks%scilab.ico
                }
            Parameters
                {
                Run at Init = Str; N=1000\;u0=-60*rand(1,N)\;v0=-6*rand(1,N)\; ; Scilab Job at Init
                Run at External = Str;  ; Scilab Job when receive event
                Run at Exit = Str;  ; Scilab Job at Exit
                }
            }
        Atomic
            {
            Name = Vector QSS_Int0
            Ports = 2 ; 1
            Path = vector\qss_integrator_vec.h
            Description = Quantized Integrator (QSS methods) with logartithmic quantization
            Graphic
                {
                Position = 4845 ; -780
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %vectors%integrator.svg
                }
            Parameters
                {
                Method = Lst; 3%QSS%QSS2%QSS3%QSS4%BQSS%CQSS%LIQSS%LIQSS2%LIQSS3% ; 
                dqmin = Str; 1e-6 ; minimum quantum (Scilab)
                dqrel = Str; 1e-3 ; relative quantum (0 : uniform) (Scilab)
                x0 = Str; u0 ; Initial state (Scilab)
                Size = Str; N ; Vector Dimension
                }
            }
        Atomic
            {
            Name = Vector Triggered Sampler0
            Ports = 2 ; 1
            Path = vector/vector_commsampler.h
            Description = Samples and holds u0 when receives events in u1. Works with polynomials up to 5th order. (Vector)
            Graphic
                {
                Position = 9570 ; -480
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %vectors%triggeredsampler.svg
                }
            Parameters
                {
                Size = Str; N ; Vector Size (Scilab)
                }
            }
        Atomic
            {
            Name = Vector CrossDet0
            Ports = 1 ; 1
            Path = vector/vector_cross_det.h
            Description = Produces events when u=level. (QSS1 to 4). (vector)
            Graphic
                {
                Position = 6420 ; -780
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %vectors%crossdetector.svg
                }
            Parameters
                {
                level = Str; 30 ; Crossing level (Scilab expression)
                output = Str; -65 ; Output event value (Scilab expression)
                Size = Str; N ; Vector Size (Scilab)
                }
            }
        Atomic
            {
            Name = Vector 2Pow0
            Ports = 1 ; 1
            Path = vector\vector_pow2.h
            Description = y=u^2. (QSS1 to 4)
            Graphic
                {
                Position = 1395 ; -1605
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %vectors%square.svg
                }
            Parameters
                {
                Size = Str; N ; Vector Size
                }
            }
        Atomic
            {
            Name = Scalar_to Vector0
            Ports = 1 ; 1
            Path = vector\scalar2vec.h
            Description = Scalar to Vector Signal. Index -1 propagates the input to all outputs.
            Graphic
                {
                Position = 495 ; 3945
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %vectors%scalar2vec.svg
                }
            Parameters
                {
                Index = Str; -1 ; Signal Index
                }
            }
        Atomic
            {
            Name = Vector QSS_Int1
            Ports = 2 ; 1
            Path = vector\qss_integrator_vec.h
            Description = Quantized Integrator (QSS methods) with logartithmic quantization
            Graphic
                {
                Position = 4845 ; 1920
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %vectors%integrator.svg
                }
            Parameters
                {
                Method = Lst; 3%QSS%QSS2%QSS3%QSS4%BQSS%CQSS%LIQSS%LIQSS2%LIQSS3% ; 
                dqmin = Str; 1e-6 ; minimum quantum (Scilab)
                dqrel = Str; 1e-3 ; relative quantum (0 : uniform) (Scilab)
                x0 = Str; v0 ; Initial state (Scilab)
                Size = Str; N ; Vector Dimension
                }
            }
        Atomic
            {
            Name = Scalar_to Vector1
            Ports = 1 ; 1
            Path = vector\scalar2vec.h
            Description = Scalar to Vector Signal. Index -1 propagates the input to all outputs.
            Graphic
                {
                Position = 495 ; 2445
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %vectors%scalar2vec.svg
                }
            Parameters
                {
                Index = Str; -1 ; Signal Index
                }
            }
        Atomic
            {
            Name = Constant0
            Ports = 0 ; 1
            Path = sources\constant_sci.h
            Description = Constant
            Graphic
                {
                Position = -780 ; 2445
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %sources%constant.svg
                }
            Parameters
                {
                K = Str; 1 ; Constant output value (Scilab expression)
                }
            }
        Atomic
            {
            Name = Step0
            Ports = 0 ; 1
            Path = sources/step_sci.h
            Description = Step
            Graphic
                {
                Position = -855 ; 3945
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %sources%step.svg
                }
            Parameters
                {
                u0 = Str; 0 ; initial value (Scilab expression)
                t0 = Str; 0 ; step time  (Scilab expression)
                uf = Str; 10 ; final value  (Scilab expression)
                }
            }
        Atomic
            {
            Name = GnuPlot0
            Ports = 2 ; 0
            Path = sinks/gnuplot.h
            Description = Plot input signal using GnuPlot
            Graphic
                {
                Position = 10545 ; -2235
                Dimension = 675 ; 720
                Direction = Right
                Color = 15
                Icon = %sinks%gnuplot.svg
                }
            Parameters
                {
                Inputs = Str; %Inputs ; Number of inputs
                Format = Str; set xrange [0:%tf] @ set grid @ set title 'Plot' ; General Formatting (use @ as line break)
                Format1 = Str; with lines title 'First output' ; Formatting options for input 1
                Format2 = Str; with lines title 'Second output' ; Formatting options for input 2
                Format3 = Str;  ; Formatting options for input 3
                Format4 = Str;  ; Formatting options for input 4
                Format5 = Str;  ; Formatting options for input 5
                }
            }
        Atomic
            {
            Name = Vector_to Scalar0
            Ports = 1 ; 1
            Path = vector\vec2scalar.h
            Description = Vector to scalar signal
            Graphic
                {
                Position = 8145 ; -3105
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %vectors%vec2scalar.svg
                }
            Parameters
                {
                Index = Str; 0 ; Signal Index
                }
            }
        Atomic
            {
            Name = Vector_to Scalar1
            Ports = 1 ; 1
            Path = vector\vec2scalar.h
            Description = Vector to scalar signal
            Graphic
                {
                Position = 8070 ; -1755
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %vectors%vec2scalar.svg
                }
            Parameters
                {
                Index = Str; N-1 ; Signal Index
                }
            }
        Atomic
            {
            Name = Vector WSum0
            Ports = 2 ; 1
            Path = vector\qss_sum_vec.h
            Description = y = K[0] * u0 + K[1] * u1 + ... + K[7] * u7 (QSS1 to 4)
            Graphic
                {
                Position = 8070 ; -660
                Dimension = 675 ; 720
                Direction = Right
                Color = 15
                Icon = %vectors%sum.svg
                }
            Parameters
                {
                K[0] = Str; -.12308 ; 
                K[1] = Str; 1 ; 
                K[2] = Str; 0 ; 
                K[3] = Str; 0 ; 
                K[4] = Str; 0 ; 
                K[5] = Str; 0 ; 
                K[6] = Str; 0 ; 
                K[7] = Str; 0 ; 
                Inputs = Str; %Inputs ; 
                Size = Str; N ; Vector Size
                }
            }
        Atomic
            {
            Name = Vector WSum2
            Ports = 5 ; 1
            Path = vector\qss_sum_vec.h
            Description = y = K[0] * u0 + K[1] * u1 + ... + K[7] * u7 (QSS1 to 4)
            Graphic
                {
                Position = 3045 ; -975
                Dimension = 675 ; 720
                Direction = Right
                Color = 15
                Icon = %vectors%sum.svg
                }
            Parameters
                {
                K[0] = Str; 0.04 ; 
                K[1] = Str; 5 ; 
                K[2] = Str; 140 ; 
                K[3] = Str; 1 ; 
                K[4] = Str; -1 ; 
                K[5] = Str; 0 ; 
                K[6] = Str; 0 ; 
                K[7] = Str; 0 ; 
                Inputs = Str; %Inputs ; 
                Size = Str; N ; Vector Size
                }
            }
        Atomic
            {
            Name = Vector WSum1
            Ports = 2 ; 1
            Path = vector\qss_sum_vec.h
            Description = y = K[0] * u0 + K[1] * u1 + ... + K[7] * u7 (QSS1 to 4)
            Graphic
                {
                Position = 3120 ; 1890
                Dimension = 675 ; 720
                Direction = Right
                Color = 15
                Icon = %vectors%sum.svg
                }
            Parameters
                {
                K[0] = Str; 4e-3 ; 
                K[1] = Str; -2e-2 ; 
                K[2] = Str; 0 ; 
                K[3] = Str; 0 ; 
                K[4] = Str; 0 ; 
                K[5] = Str; 0 ; 
                K[6] = Str; 0 ; 
                K[7] = Str; 0 ; 
                Inputs = Str; %Inputs ; 
                Size = Str; N ; Vector Size
                }
            }
        Point
            {
            ConectedLines = 2 ; 8 ; 10
            ConectedExtrems = Org ; Org ; Org
            Position = 7560 ; -510
            }
        Point
            {
            ConectedLines = 7 ; 9 ; 10
            ConectedExtrems = Org ; Org ; Org
            Position = 7560 ; 840
            }
        Point
            {
            ConectedLines = 4 ; 12 ; 13
            ConectedExtrems = Org ; Org ; Org
            Position = 5910 ; 2265
            }
        Point
            {
            ConectedLines = 13 ; 14 ; 28
            ConectedExtrems = Org ; Org ; Org
            Position = 5910 ; 2265
            }
        Point
            {
            ConectedLines = 3 ; 16 ; 32
            ConectedExtrems = Org ; Org ; Org
            Position = 5985 ; -510
            }
        Point
            {
            ConectedLines = 15 ; 18 ; 21
            ConectedExtrems = Org ; Org ; Org
            Position = 960 ; -810
            }
        Point
            {
            ConectedLines = 17 ; 20 ; 21
            ConectedExtrems = Org ; Org ; Org
            Position = 960 ; -735
            }
        Point
            {
            ConectedLines = 18 ; 29 ; 30
            ConectedExtrems = Org ; Org ; Org
            Position = 5985 ; -1650
            }
        Point
            {
            ConectedLines = 30 ; 31 ; 32
            ConectedExtrems = Org ; Org ; Org
            Position = 5985 ; -1575
            }
        Line
            {
            Source = Cmp ;  14 ;  1 ; 0
            Sink = Cmp ;  3 ;  1 ; -1
            PointX = 8850 ; 8850 ; 9435
            PointY = -300 ; -300 ; -300
            }
        Line
            {
            Source = Cmp ;  4 ;  1 ; 0
            Sink = Pnt ;  1 ; -1 ; 0
            PointX = 7200 ; 7560 ; 7560
            PointY = -450 ; -450 ; -510
            }
        Line
            {
            Source = Cmp ;  2 ;  1 ; 0
            Sink = Pnt ;  5 ; -1 ; 0
            PointX = 5625 ; 5985 ; 5985
            PointY = -450 ; -450 ; -510
            }
        Line
            {
            Source = Cmp ;  7 ;  1 ; 0
            Sink = Pnt ;  3 ; -1 ; 0
            PointX = 5625 ; 5910 ; 5910
            PointY = 2250 ; 2250 ; 2265
            }
        Line
            {
            Source = Cmp ;  16 ;  1 ; 0
            Sink = Cmp ;  7 ;  1 ; -1
            PointX = 3900 ; 4710 ; 4710
            PointY = 2250 ; 2250 ; 2100
            }
        Line
            {
            Source = Cmp ;  3 ;  1 ; 0
            Sink = Cmp ;  7 ;  2 ; -1
            PointX = 10350 ; 10575 ; 10575 ; 4710 ; 4710
            PointY = -150 ; -150 ; 3675 ; 3675 ; 2400
            }
        Line
            {
            Source = Cmp ;  3 ;  2 ; -1
            Sink = Pnt ;  2 ; -1 ; 0
            PointX = 9435 ; 9150 ; 9150 ; 7560
            PointY = 0 ; 0 ; 840 ; 840
            }
        Line
            {
            Source = Pnt ;  1 ; -1 ; 0
            Sink = Cmp ;  14 ;  1 ; -1
            PointX = 7560 ; 7935 ; 7935
            PointY = -510 ; -510 ; -450
            }
        Line
            {
            Source = Cmp ;  2 ;  2 ; -1
            Sink = Pnt ;  2 ; -1 ; 0
            PointX = 4710 ; 4575 ; 4575 ; 7560
            PointY = -300 ; -300 ; 840 ; 840
            }
        Line
            {
            Source = Pnt ;  2 ; -1 ; 0
            Sink = Pnt ;  1 ; -1 ; 0
            PointX = 7560 ; 7560 ; 7560
            PointY = 840 ; 840 ; -510
            }
        Line
            {
            Source = Cmp ;  15 ;  1 ; 0
            Sink = Cmp ;  2 ;  1 ; -1
            PointX = 3825 ; 3825 ; 4710
            PointY = -600 ; -600 ; -600
            }
        Line
            {
            Source = Cmp ;  16 ;  2 ; -1
            Sink = Pnt ;  3 ; -1 ; 0
            PointX = 2985 ; 2850 ; 2850 ; 5910 ; 5910
            PointY = 2400 ; 2400 ; 3900 ; 3900 ; 2265
            }
        Line
            {
            Source = Pnt ;  3 ; -1 ; 0
            Sink = Pnt ;  4 ; -1 ; 0
            PointX = 5910 ; 5910 ; 5910
            PointY = 2265 ; 2265 ; 2265
            }
        Line
            {
            Source = Cmp ;  15 ;  5 ; -1
            Sink = Pnt ;  4 ; -1 ; 0
            PointX = 2910 ; 2700 ; 2700 ; 5910 ; 5910
            PointY = -300 ; -300 ; 1125 ; 1125 ; 2265
            }
        Line
            {
            Source = Cmp ;  5 ;  1 ; -1
            Sink = Pnt ;  6 ; -1 ; 0
            PointX = 1260 ; 960 ; 960
            PointY = -1275 ; -1275 ; -810
            }
        Line
            {
            Source = Pnt ;  5 ; -1 ; 0
            Sink = Cmp ;  4 ;  1 ; -1
            PointX = 5985 ; 6285 ; 6285
            PointY = -510 ; -510 ; -450
            }
        Line
            {
            Source = Cmp ;  16 ;  1 ; -1
            Sink = Pnt ;  7 ; -1 ; 0
            PointX = 2985 ; 960 ; 960
            PointY = 2100 ; 2100 ; -735
            }
        Line
            {
            Source = Pnt ;  6 ; -1 ; 0
            Sink = Pnt ;  8 ; -1 ; 0
            PointX = 960 ; 960 ; 960 ; 5985 ; 5985
            PointY = -810 ; -825 ; -1725 ; -1725 ; -1650
            }
        Line
            {
            Source = Cmp ;  15 ;  1 ; -1
            Sink = Cmp ;  5 ;  1 ; 0
            PointX = 2910 ; 2175 ; 2175
            PointY = -900 ; -900 ; -1275
            }
        Line
            {
            Source = Cmp ;  15 ;  2 ; -1
            Sink = Pnt ;  7 ; -1 ; 0
            PointX = 2910 ; 960 ; 960
            PointY = -750 ; -750 ; -735
            }
        Line
            {
            Source = Pnt ;  7 ; -1 ; 0
            Sink = Pnt ;  6 ; -1 ; 0
            PointX = 960 ; 960 ; 960
            PointY = -735 ; -735 ; -810
            }
        Line
            {
            Source = Cmp ;  8 ;  1 ; 0
            Sink = Cmp ;  15 ;  3 ; -1
            PointX = 1275 ; 2175 ; 2175 ; 2910
            PointY = 2775 ; 2775 ; -600 ; -600
            }
        Line
            {
            Source = Cmp ;  6 ;  1 ; 0
            Sink = Cmp ;  15 ;  4 ; -1
            PointX = 1275 ; 2400 ; 2400 ; 2910
            PointY = 4275 ; 4275 ; -450 ; -450
            }
        Line
            {
            Source = Cmp ;  9 ;  1 ; 0
            Sink = Cmp ;  8 ;  1 ; -1
            PointX = 0 ; 360 ; 360
            PointY = 2775 ; 2775 ; 2775
            }
        Line
            {
            Source = Cmp ;  10 ;  1 ; 0
            Sink = Cmp ;  6 ;  1 ; -1
            PointX = -75 ; 360 ; 360
            PointY = 4275 ; 4275 ; 4275
            }
        Line
            {
            Source = Cmp ;  12 ;  1 ; 0
            Sink = Cmp ;  11 ;  1 ; -1
            PointX = 8925 ; 10410 ; 10410
            PointY = -2775 ; -2775 ; -2025
            }
        Line
            {
            Source = Cmp ;  13 ;  1 ; 0
            Sink = Cmp ;  11 ;  2 ; -1
            PointX = 8850 ; 10410 ; 10410
            PointY = -1425 ; -1425 ; -1725
            }
        Line
            {
            Source = Pnt ;  4 ; -1 ; 0
            Sink = Cmp ;  14 ;  2 ; -1
            PointX = 5910 ; 5910 ; 7650 ; 7650 ; 7935
            PointY = 2265 ; 2265 ; 2265 ; -150 ; -150
            }
        Line
            {
            Source = Cmp ;  12 ;  1 ; -1
            Sink = Pnt ;  8 ; -1 ; 0
            PointX = 8010 ; 5985 ; 5985
            PointY = -2775 ; -2775 ; -1650
            }
        Line
            {
            Source = Pnt ;  8 ; -1 ; 0
            Sink = Pnt ;  9 ; -1 ; 0
            PointX = 5985 ; 5985 ; 5985
            PointY = -1650 ; -1650 ; -1575
            }
        Line
            {
            Source = Cmp ;  13 ;  1 ; -1
            Sink = Pnt ;  9 ; -1 ; 0
            PointX = 7935 ; 5985 ; 5985
            PointY = -1425 ; -1425 ; -1575
            }
        Line
            {
            Source = Pnt ;  9 ; -1 ; 0
            Sink = Pnt ;  5 ; -1 ; 0
            PointX = 5985 ; 5985 ; 5985
            PointY = -1575 ; -510 ; -510
            }
        }
    }
