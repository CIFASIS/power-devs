Coupled
    {
    Type = Root
    Name = statespace
    Ports = 0; 0
    Description = 
    Graphic
        {
        Position = 0; 0
        Dimension = 0; 0
        Direction = Right
        Color = 15
        Icon = 
        Window = 5000; 5000; 5000; 5000
        }
    Parameters
        {
        }
    System
        {
        Atomic
            {
            Name = Scilab Command0
            Ports = 1 ; 0
            Path = Hybrid\runscilabjob.h
            Description = Runs Scilab commands at Init, Exit and when receive events.
            Graphic
                {
                Position = -7755 ; -4230
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %sinks%scilab.ico
                }
            Parameters
                {
                Run at Init = Str; A=[0 1 0\;0 0 1\;-2 -4 -3]\; B=[0\;0\;1] ; Scilab Job at Init
                Run at External = Str;  ; Scilab Job when receive event
                Run at Exit = Str;  ; Scilab Job at Exit
                }
            }
        Atomic
            {
            Name = Matrix Gain1
            Ports = 1 ; 1
            Path = vector/matrix_gain.h
            Description = y = A * u, where u and y are vectors and parameter A is a Scilab matrix.
            Graphic
                {
                Position = -4830 ; -1155
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %vectors%matrixgain.svg
                }
            Parameters
                {
                A = Str; A ; Matrix Gain
                }
            }
        Atomic
            {
            Name = Vector QSS_Int0
            Ports = 1 ; 1
            Path = vector\qss_integrator_vec.h
            Description = Quantized Integrator (QSS methods) with logartithmic quantization
            Graphic
                {
                Position = -1980 ; -1305
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %vectors%integrator.svg
                }
            Parameters
                {
                Method = Lst; 3%QSS%QSS2%QSS3%QSS4%BQSS%CQSS%LIQSS%LIQSS2%LIQSS3% ; 
                dqmin = Str; 1e-6 ; minimum quantum (Scilab)
                dqrel = Str; 1e-3 ; relative quantum (0 : uniform) (Scilab)
                x0 = Str; 0 ; Initial state (Scilab)
                Size = Str; length(B) ; Vector Dimension
                }
            }
        Atomic
            {
            Name = GnuPlot0
            Ports = 1 ; 0
            Path = sinks/gnuplot.h
            Description = Plot input signal using GnuPlot
            Graphic
                {
                Position = 1545 ; -885
                Dimension = 675 ; 720
                Direction = Right
                Color = 15
                Icon = %sinks%gnuplot.svg
                }
            Parameters
                {
                Inputs = Str; %Inputs ; Number of inputs
                Format = Str; set xrange [0:%tf] @ set grid @ set title 'Plot' ; General Formatting (use @ as line break)
                Format1 = Str; with lines title 'First output' ; Formatting options for input 1
                Format2 = Str;  ; Formatting options for input 2
                Format3 = Str;  ; Formatting options for input 3
                Format4 = Str;  ; Formatting options for input 4
                Format5 = Str;  ; Formatting options for input 5
                }
            }
        Atomic
            {
            Name = Vector_to Scalar0
            Ports = 1 ; 1
            Path = vector\vec2scalar.h
            Description = Vector to scalar signal
            Graphic
                {
                Position = -105 ; -855
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %vectors%vec2scalar.svg
                }
            Parameters
                {
                Index = Str; 0 ; Signal Index
                }
            }
        Atomic
            {
            Name = Scalar_to Vector0
            Ports = 1 ; 1
            Path = vector\scalar2vec.h
            Description = Scalar to Vector Signal. Index -1 propagates the input to all outputs.
            Graphic
                {
                Position = -6180 ; -2505
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %vectors%scalar2vec.svg
                }
            Parameters
                {
                Index = Str; 0 ; Signal Index
                }
            }
        Atomic
            {
            Name = Constant0
            Ports = 0 ; 1
            Path = sources\constant_sci.h
            Description = Constant
            Graphic
                {
                Position = -7830 ; -2505
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %sources%constant.svg
                }
            Parameters
                {
                K = Str; 1 ; Constant output value (Scilab expression)
                }
            }
        Atomic
            {
            Name = Matrix Gain0
            Ports = 1 ; 1
            Path = vector/matrix_gain.h
            Description = y = A * u, where u and y are vectors and parameter A is a Scilab matrix.
            Graphic
                {
                Position = -4830 ; -2505
                Dimension = 675 ; 675
                Direction = Right
                Color = 15
                Icon = %vectors%matrixgain.svg
                }
            Parameters
                {
                A = Str; B ; Matrix Gain
                }
            }
        Atomic
            {
            Name = Vector WSum0
            Ports = 2 ; 1
            Path = vector\qss_sum_vec.h
            Description = y = K[0] * u0 + K[1] * u1 + ... + K[7] * u7 (QSS1 to 4)
            Graphic
                {
                Position = -3255 ; -1335
                Dimension = 675 ; 720
                Direction = Right
                Color = 15
                Icon = %vectors%sum.svg
                }
            Parameters
                {
                K[0] = Str; 1 ; 
                K[1] = Str; 1 ; 
                K[2] = Str; 0 ; 
                K[3] = Str; 0 ; 
                K[4] = Str; 0 ; 
                K[5] = Str; 0 ; 
                K[6] = Str; 0 ; 
                K[7] = Str; 0 ; 
                Inputs = Str; %Inputs ; 
                Size = Str; length(B) ; Vector Size
                }
            }
        Point
            {
            ConectedLines = 1 ; 7 ; 8
            ConectedExtrems = Org ; Org ; Org
            Position = -750 ; -525
            }
        Line
            {
            Source = Cmp ;  3 ;  1 ; 0
            Sink = Pnt ;  1 ; -1 ; 0
            PointX = -1200 ; -750 ; -750
            PointY = -975 ; -975 ; -525
            }
        Line
            {
            Source = Cmp ;  5 ;  1 ; 0
            Sink = Cmp ;  4 ;  1 ; -1
            PointX = 675 ; 675 ; 1410
            PointY = -525 ; -525 ; -525
            }
        Line
            {
            Source = Cmp ;  7 ;  1 ; 0
            Sink = Cmp ;  6 ;  1 ; -1
            PointX = -7050 ; -6315 ; -6315
            PointY = -2175 ; -2175 ; -2175
            }
        Line
            {
            Source = Cmp ;  6 ;  1 ; 0
            Sink = Cmp ;  8 ;  1 ; -1
            PointX = -5400 ; -5400 ; -4965
            PointY = -2175 ; -2175 ; -2175
            }
        Line
            {
            Source = Cmp ;  2 ;  1 ; 0
            Sink = Cmp ;  9 ;  2 ; -1
            PointX = -4050 ; -4050 ; -3390
            PointY = -825 ; -825 ; -825
            }
        Line
            {
            Source = Cmp ;  9 ;  1 ; 0
            Sink = Cmp ;  3 ;  1 ; -1
            PointX = -2475 ; -2475 ; -2115
            PointY = -975 ; -975 ; -975
            }
        Line
            {
            Source = Cmp ;  5 ;  1 ; -1
            Sink = Pnt ;  1 ; -1 ; 0
            PointX = -240 ; -750 ; -750
            PointY = -525 ; -525 ; -525
            }
        Line
            {
            Source = Pnt ;  1 ; -1 ; 0
            Sink = Cmp ;  2 ;  1 ; -1
            PointX = -750 ; -750 ; -4965 ; -4965
            PointY = -525 ; 75 ; 75 ; -825
            }
        Line
            {
            Source = Cmp ;  9 ;  1 ; -1
            Sink = Cmp ;  8 ;  1 ; 0
            PointX = -3390 ; -3390 ; -3900 ; -3900 ; -4050
            PointY = -1125 ; -1125 ; -1125 ; -2175 ; -2175
            }
        }
    }
